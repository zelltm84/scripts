#!/bin/bash
# created by: Zell
#===============================================================================
# variables

#---------------------------------------
# source file

source /usr/local/sbin/stdlib

#---------------------------------------
# common values

LOGNAME=$PROG
LOG=/var/log/$LOGNAME.log
LOGROCONF=/etc/logrotate.d/$LOGNAME

#---------------------------------------
# initial values

SHOWALL=false

#===============================================================================
# help text

HELP_TXT="
This script runs:
  # git branch -a --color
  # git show-ref |egrep -i 'master|$BRANCH'
  # git log --graph --all --decorate --abbrev-commit --oneline
  # git status

SYNTAX:
  # $PROG [OPTIONS]

OPTIONS:
  -h, --help         display this help text and exit
  -l, --log          enable logging to a file
  -v, --verbose      be verbose
  -vv, --debug       turn on debugging (very verbose)
  -dr, --dryrun      do a dry run
  -a, --show-all     don't cut off any output (noramlly, only 10 lines of each 'git' command are shown)

EXAMPLES:
  Normal operation:  # $PROG
  Dry run:           # $PROG -vv -dr
  Logging:           # $PROG -v --log

NOTES:
  don't combine options:
    correct:         # $PROG -l -vv
    incorrect:       # $PROG -lvv

"

#===============================================================================
# functions

#---------------------------------------
# 

#===============================================================================
# script start

#---------------------------------------
# process options

while (( "$#" > 0 )) ;do
  case $1 in
    -h|--help)      f_usage 0                               ;;
    -v|--verbose)   VERBOSE=true ;shift                     ;;
    -l|--log)       LOGGING=true ;shift                     ;;
    -vv|--debug)    VERBOSE=true ;DEBUG=true ;shift         ;;
    -dr|--dryrun)   VERBOSE=true ;DRYRUN=true ;shift        ;;
    -a|--show-all)  SHOWALL=true ;shift                     ;;
    "")             break                                   ;;
    *)              f_msg -e "Unkown option(s): $*" ;break  ;;
  esac
done

f_msg -l -d "SCRIPT START"

#---------------------------------------
# arguments

f_msg -d "VERBOSE=$VERBOSE"
f_msg -d "LOGGING=$LOGGING"
f_msg -d "DEBUG=$DEBUG"
f_msg -d "DRYRUN=$DRYRUN"
f_msg -d "SHOWALL=$SHOWALL"

#---------------------------------------
# error checks

if [[ ! -d ./.git ]] ;then
  f_msg -e "Git has not been initialized here: `pwd`"
fi

#===============================================================================
# body

#---------------------------------------
# git branch

if [[ $SHOWALL == true ]] ;then
	f_msg "git branch -a --color"
	f_run "git branch -a --color"
else
	f_msg "git branch -a --color |head"
	f_run "git branch -a --color |head"
fi

#---------------------------------------
# git show-ref

BRANCH=`git branch |awk '{print $2}'`
if [[ $SHOWALL == true ]] ;then
	f_msg "git show-ref |egrep -i 'master|$BRANCH'"
	f_run "git show-ref |egrep -i 'master|$BRANCH'"
else
	f_msg "git show-ref |egrep -i 'master|$BRANCH' |head"
	f_run "git show-ref |egrep -i 'master|$BRANCH' |head"
fi

#---------------------------------------
# git log

if [[ $SHOWALL == true ]] ;then
	f_msg "git log --graph --all --decorate --abbrev-commit --oneline |cat"
	f_run "git log --graph --all --decorate --abbrev-commit --oneline |cat"
else
	f_msg "git log --graph --all --decorate --abbrev-commit --oneline |head"
	f_run "git log --graph --all --decorate --abbrev-commit --oneline |head"
fi

#---------------------------------------
# git status

f_msg "git status"
f_run "git status"

#===============================================================================
# cleanup

f_logro
f_exit
