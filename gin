#!/bin/bash
# created by: Zell
#===============================================================================
# source files

source /usr/local/sbin/stdlib

#===============================================================================
# variables

#---------------------------------------
# common values

LOGNAME=$PROG
LOG=/var/log/$LOGNAME.log
LOGROCONF=/etc/logrotate.d/$LOGNAME

#---------------------------------------
# files

LISTFILE=/etc/gin.list

#===============================================================================
# help text

HELP_TXT="
This script types out ssh commands for you and executes them.
GIN stands for \"Get IN\".

Reference File
  The reference file is used to populate the hostname list at the second prompt:
    $LISTFILE
  The reference file needs 4 sections in it (separated by spaces):
    <hostname> <user> <port> <private_ssh_key_file_path>

SYNTAX:
  # $PROG [OPTIONS]

OPTIONS:
  -h, --help         display this help text and exit
  -l, --log          enable logging to a file
  -v, --verbose      be verbose
  -vv, --debug       turn on debugging (very verbose)
  -dr, --dryrun      do a dry run

EXAMPLES:
  Normal operation:  # $PROG
  Dry run:           # $PROG -vv -dr
  Logging:           # $PROG -v --log

NOTES:
  don't combine options:
    correct:         # $PROG -l -vv
    incorrect:       # $PROG -lvv

"

#===============================================================================
# functions

#===============================================================================
# script start

clear

#---------------------------------------
# process options

while (( "$#" > 0 )) ;do
  case $1 in
    -h|--help)     f_usage 0                               ;;
    -v|--verbose)  VERBOSE=true ;shift                     ;;
    -l|--log)      LOGGING=true ;shift                     ;;
    -vv|--debug)   VERBOSE=true ;DEBUG=true ;shift         ;;
    -dr|--dryrun)  VERBOSE=true ;DRYRUN=true ;shift        ;;
    "")            break                                   ;;
    *)             f_msg -e "Unkown option(s): $*" ;break  ;;
  esac
done
VERBOSE=true
LOGGING=false

f_msg -l -d "SCRIPT START"

#---------------------------------------
# arguments

f_msg -d "VERBOSE=$VERBOSE"
f_msg -d "LOGGING=$LOGGING"
f_msg -d "DEBUG=$DEBUG"
f_msg -d "DRYRUN=$DRYRUN"

#---------------------------------------
# error checks

f_exist $LISTFILE

#===============================================================================
# body

#---------------------------------------
# select server

#....................
# first prompt: filter

read -p "
Enter a string to filter the hostname list (case-insensitive grep).
(To view all hosts, leave blank and hit enter.)
[selection]: " SELECTION

LISTFILTER=`grep -i "$SELECTION" $LISTFILE`

#....................
# second prompt: selection

COUNT=`echo "$LISTFILTER" |wc -l |xargs`
LISTNUM=`echo "$LISTFILTER" |sort |cat -n |column -t`

read -p "
`echo "$LISTNUM" |awk '{$4=$5=""; print $0}' |column -t`

Which server do you want to log into?
[1-$COUNT, (q)uit]: " SELECTION

#....................
# error checking

if [[ $SELECTION == q ]] || [[ $SELECTION == quit ]] ;then
  f_exit
elif [[ $SELECTION < 1 ]] || [[ $SELECTION > $COUNT ]] ;then
  f_msg -e -d "invalid selection"
fi

#....................
# set variables

HOST=`echo "$LISTNUM" |grep "^$SELECTION\ " |awk '{print $2}' |awk '{print $1}'`
USER=`echo "$LISTNUM" |grep "^$SELECTION\ " |awk '{print $3}' |awk '{print $1}'`
PORT=`echo "$LISTNUM" |grep "^$SELECTION\ " |awk '{print $4}' |awk '{print $1}'`
KEY=`echo "$LISTNUM" |grep "^$SELECTION\ " |awk '{print $5}' |awk '{print $1}'`
#IP=`ping -c1 $HOST |grep "bytes from" |awk '{print $4}' |cut -d: -f1`

#---------------------------------------
# ssh into server

f_msg "

HOST=$HOST
USER=$USER
PORT=$PORT
KEY=$KEY
IP=$IP

ssh -p $PORT -i $KEY $USER@$HOST

"

f_run "ssh -p $PORT -i $KEY $USER@$HOST"

#===============================================================================
# cleanup

#---------------------------------------
# rotate log

f_logro

#...................
# exit

f_exit
