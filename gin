#!/bin/bash
# created by: Zell
#===============================================================================
# source files

source /usr/local/sbin/stdlib

#===============================================================================
# variables

#---------------------------------------
# common values

LOGNAME=$PROG
LOG=/var/log/$LOGNAME.log
LOGRO=/etc/logrotate.d/$LOGNAME

#---------------------------------------
# files

LIST=/etc/gin.list
TMPLIST=/tmp/$PROG.$SECDATE.list

#===============================================================================
# help text

HELP_TXT="
This script types out ssh commands for you.

SYNTAX:
  # $PROG [OPTIONS]

OPTIONS:
  -h, --help         display this help text and exit
  -l, --log          enable logging to a file
  -v, --verbose      be verbose
  -vv, --debug       turn on debugging (very verbose)
  -dr, --dryrun      do a dry run

EXAMPLES:
  Normal operation:  # $PROG
  Dry run:           # $PROG -vv -dr
  Logging:           # $PROG -v --log

NOTES:
  don't combine options:
    correct:         # $PROG -l -vv
    incorrect:       # $PROG -lvv

"

#===============================================================================
# functions

#===============================================================================
# script start

#---------------------------------------
# process options

while (( "$#" > 0 )) ;do
  case $1 in
    -h|--help)     f_usage 0                               ;;
    -v|--verbose)  VERBOSE=true ;shift                     ;;
    -l|--log)      LOGGING=true ;shift                     ;;
    -vv|--debug)   VERBOSE=true ;DEBUG=true ;shift         ;;
    -dr|--dryrun)  VERBOSE=true ;DRYRUN=true ;shift        ;;
    "")            break                                   ;;
    *)             f_msg -e "Unkown option(s): $*" ;break  ;;
  esac
done
VERBOSE=true
LOGGING=false

f_msg -l -d "SCRIPT START"

#---------------------------------------
# arguments

f_msg -d "VERBOSE=$VERBOSE"
f_msg -d "LOGGING=$LOGGING"
f_msg -d "DEBUG=$DEBUG"
f_msg -d "DRYRUN=$DRYRUN"

#---------------------------------------
# error checks

f_exist $LIST

#===============================================================================
# body

#---------------------------------------
# select server

COUNT=`cat $LIST |wc -l |xargs`
sort $LIST |cat -n |column -t > $TMPLIST

#....................
# prompt

read -p "
`cat $TMPLIST`

Which server do you want to log into?
[1-$COUNT, (q)uit]: " SELECTION

#....................
# error checking

if [[ $SELECTION == q ]] || [[ $SELECTION == quit ]] ;then
  f_exit
elif [[ $SELECTION < 1 ]] || [[ $SELECTION > $COUNT ]] ;then
  f_msg -e -d "invalid selection"
fi

#....................
# set variables

HOST=`grep ^$SELECTION\  $TMPLIST |awk '{print $2}' |awk '{print $1}'`
USER=`grep ^$SELECTION\  $TMPLIST |awk '{print $3}' |awk '{print $1}'`
PORT=`grep ^$SELECTION\  $TMPLIST |awk '{print $4}' |awk '{print $1}'`
KEY=`grep ^$SELECTION\  $TMPLIST |awk '{print $5}' |awk '{print $1}'`
#IP=`ping -c1 $HOST |grep "bytes from" |awk '{print $4}' |cut -d: -f1`

#---------------------------------------
# ssh into server

f_msg "

HOST=$HOST
USER=$USER
PORT=$PORT
KEY=$KEY
IP=$IP

ssh -p $PORT -i $KEY $USER@$HOST

"

f_run "ssh -p $PORT -i $KEY $USER@$HOST"

#===============================================================================
# cleanup

#---------------------------------------
# rotate log

f_logro

#...................
# exit

f_exit
