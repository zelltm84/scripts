#!/bin/bash
# created by: Zell
#===============================================================================
# variables

#---------------------------------------
# source file

source /usr/local/sbin/stdlib

#---------------------------------------
# common values

LOGNAME=$PROG
LOG=/var/log/$LOGNAME.log
LOGROCONF=/etc/logrotate.d/$LOGNAME

HASH=sha256
#ALGO=dsa	# weaker algorithm
ALGO=rsa
#BITS=2048	# minimum
BITS=4096
DAYS=1095	# days before cert expires
USER=admin

COUNTRY="US"
STATE="New York"
CITY="New York"
ORGANIZATION="Conglamo"
ORGUNIT="Web Division"

#===============================================================================
# help text

HELP_TXT="
This script can:
  against domain:
    -f, --fetch          get the ssl certificate from a specified website
    -g, --generate       generate encrypted key, decrypted key, csr, and crt
    -gv3, --generate-v3  generate ROOTCA files & version 3 SAN keys, csr, and crt
  against file path:
    -d, --decode         decode a specified ssl certificate

SYNTAX:
  # $PROG [OPTIONS]

OPTIONS:
  -h, --help         display this help text and exit
  -l, --log          enable logging to a file
  -v, --verbose      be verbose
  -vv, --debug       turn on debugging (very verbose)
  -dr, --dryrun      do a dry run

EXAMPLES:
  Normal operation:  # $PROG -f www.google.com
  Dry run:           # $PROG -vv -dr --generate host.domain.com
  Logging:           # $PROG -v --log -gv3 host.domain.com

NOTES:
  don't combine options:
    correct:         # $PROG -l -vv
    incorrect:       # $PROG -lvv

"

#===============================================================================
# functions

#---------------------------------------
# print variables

f_printvar() {
TLD=`echo $FQDN |awk -F. '{print $3}'`
DOM=`echo $FQDN |awk -F. '{print $2}'`
SUBDOM=`echo $FQDN |awk -F. '{print $1}'`
DOMAIN=$DOM.$TLD

f_msg -d "Variables
########################################
FQDN=$FQDN
SUBDOM=$SUBDOM
DOM=$DOM
TLD=$TLD
BITS=$BITS
ALGO=$ALGO
DAYS=$DAYS
########################################
"
}

#---------------------------------------
# create cert files (version 1) CN method

f_sslgenv1() {
f_printvar
KEY="$FQDN.key"
CSR="$FQDN.csr"
CRT="$FQDN.crt"

f_msg "Creating encrypted key file: $FQDN"
f_run "openssl genrsa -des3 -out $FQDN $BITS"
f_msg "Creating decrypted key file: $KEY"
f_run "openssl $ALGO -in $FQDN -out $KEY"
f_msg "Generating CSR file: $CSR"
f_run "openssl req -new -key $KEY -out $CSR"
f_msg "Signing CRT file: $CRT"
f_run "openssl x509 -req -days $DAYS -in $CSR -signkey $KEY -out $CRT"

# check if ssl key matches ssl cert
# if the output of these commands match, then the certs also match
f_msg "Validating SSL files..."
f_run "openssl x509 -noout -modulus -in $FQDN.crt |openssl md5"
f_run "openssl $ALGO -noout -modulus -in $FQDN.key |openssl md5"
f_run "openssl req -noout -modulus -in $FQDN.csr |openssl md5"
}

#---------------------------------------
# create cert files (version 3) SAN method

f_sslgenv3() {
f_printvar
KEY="$FQDN.key"
CSR="$FQDN.csr"
CRT="$FQDN.crt"
CNF="$CSR.cnf"
V3EXT="$FQDN.ext"
ROOTCAKEY="rootCA-$FQDN.key"
ROOTCAPEM="rootCA-$FQDN.pem"

# make config files
f_msg "Creating openssl configuration file: $CNF"
echo "[req]
default_bits = $BITS
prompt = no
default_md = $HASH
distinguished_name = dn

[dn]
C=$COUNTRY
ST=$STATE
L=$CITY
O=$ORGANIZATION
OU=$ORGUNIT
emailAddress=$USER@$DOMAIN
CN = $FQDN" > $CNF

f_msg "Creating version 3 extension file: $V3EXT"
echo "authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = $FQDN" > $V3EXT

f_msg "Creating root CA .key: $ROOTCAKEY"
#f_run "openssl genrsa -des3 -out $ROOTCAKEY 2048"
f_run "openssl genrsa -des3 -out $ROOTCAKEY $BITS"
f_msg "Creating root CA .pem: $ROOTCAPEM"
#f_run "openssl req -x509 -new -nodes -key $ROOTCAKEY -sha256 -days 1024 -out $ROOTCAPEM"
f_run "openssl req -x509 -new -nodes -key $ROOTCAKEY -$HASH -days $DAYS -out $ROOTCAPEM"
#f_run "openssl req -new -sha256 -nodes -out $CSR -newkey rsa:2048 -keyout $KEY -config <( cat $CNF )"
f_run "openssl req -new -$HASH -nodes -out $CSR -newkey rsa:$BITS -keyout $KEY -config <( cat $CNF )"
f_run "openssl x509 -req -in $CSR -CA $ROOTCAPEM -CAkey $ROOTCAKEY -CAcreateserial -out $CRT -days $DAYS -$HASH -extfile $V3EXT"
}

#---------------------------------------
# fetch ssl certificate

f_fetch() {
f_printvar
f_msg "Fetching SSL certificate for $FQDN..."
f_run "openssl s_client -servername $FQDN -connect $FQDN:443 </dev/null"
}

#---------------------------------------
# decode certificate

f_decode() {
if [[ -f $1 ]] ;then
	f_msg "Decoding $1..."
	f_run "openssl x509 -in $1 -text -noout"
	f_msg "Getting sha1 fingerprint..."
	f_run "openssl x509 -in $1 -noout -fingerprint -sha1"
	f_msg "Getting $HASH fingerprint..."
	f_run "openssl x509 -in $1 -noout -fingerprint -$HASH"
else
	usage 1 "file not found: $1"
fi
}

#===============================================================================
# script start

#---------------------------------------
# process options

while (( "$#" > 0 )) ;do
  case $1 in
    -h|--help)           f_usage 0                         ;;
    -v|--verbose)        VERBOSE=true ;shift               ;;
    -l|--log)            LOGGING=true ;shift               ;;
    -vv|--debug)         VERBOSE=true ;DEBUG=true ;shift   ;;
    -dr|--dryrun)        VERBOSE=true ;DRYRUN=true ;shift  ;;
    -d|--decode)         DECODE=true ;shift                ;;
    -f|--fetch)          FETCH=true ;shift                 ;;
    -g|--generate)       GENERATE=true ;shift              ;;
    -gv3|--generate-v3)	 VERSION3=true ;shift              ;;
    *)			 break                             ;;
  esac
done
LOGGING=false

f_msg -l -d "SCRIPT START"

#---------------------------------------
# arguments

f_msg -d "VERBOSE=$VERBOSE"
f_msg -d "LOGGING=$LOGGING"
f_msg -d "DEBUG=$DEBUG"
f_msg -d "DRYRUN=$DRYRUN"

#---------------------------------------
# error checks

#===============================================================================
# body

#---------------------------------------
# filter selection

FQDN=$1
if [[ $GENERATE == true ]] ;then
	f_sslgenv1
elif [[ $VERSION3 == true ]] ;then
	f_sslgenv3
elif [[ $FETCH == true ]] ;then
	f_fetch
elif [[ $DECODE == true ]] ;then
	f_decode $1
else
	usage 1 "Unkown options: $*"
fi

#===============================================================================
# cleanup

f_logro
f_exit
